getURL(url, userpwd="jyzhou2009@gmail.com:crazyboy95!", httpauth = 1L)
url = "http://fantasy.espn.com/apis/v3/games/fba/seasons/2019/segments/0/leagues/8490389?forTeamId=1&scoringPeriodId=65&view=mRoster"
getURL(url)
raw.result <- GET(url = url, authenticate(user = 'jyzhou2009@gmail.com',
password = 'crazyboy95!'),
type = "basic")
raw.result
this.raw.content <- rawToChar(raw.result$content)
this.raw.content
raw.result <- GET(url = url, authenticate(user = 'jyzhou2009@gmail.com',
password = 'crazyboy95!', type = "basic"))
this.raw.content <- rawToChar(raw.result$content)
this.raw.content
library(RSelenium)
checkForServer()
driver <- rsDriver(browser=c("chrome"))
url = "http://fantasy.espn.com/apis/v3/games/fba/seasons/2019/segments/0/leagues/8490389?forTeamId=1&scoringPeriodId=65&view=mRoster"
driver <- rsDriver(browser=c("chrome"), )
remDr$closeall()
remDr <- driver[["client"]]
remDr$closeall()
driver <- rsDriver(browser=c("chrome"), )
driver <- rsDriver(browser=c("chrome"))
remDr <- driver[["client"]]
# remDr$open()
remDr$navigate(url)
remDr$closeall()
driver <- rsDriver(browser=c("chrome"))
driver <- rsDriver(browser=c("chrome"), port = 4444)
library(RSelenium)
url = "http://fantasy.espn.com/apis/v3/games/fba/seasons/2019/segments/0/leagues/8490389?forTeamId=1&scoringPeriodId=65&view=mRoster"
driver <- rsDriver(browser=c("chrome"))
remDr$server$stop()
remDr <- driver[["client"]]
driver <- rsDriver(browser=c("chrome"), port = 4567L)
driver
library(quantmod)
library(lattice)
library(timeSeries)
library(tseries)
library(rugarch)
library(data.table)
library(ggplot2)
library(glue)
library(parallel)
library(plotly)
funcGetStockPrice <- function(vec.symbols, start_date = Sys.Date() - 20, end_date = Sys.Date(), bln.all = FALSE,
verbose = FALSE){
dt.return.this <- rbindlist(lapply(1:length(vec.symbols), function(x){
tmp_stock <- vec.symbols[x]
if (verbose){
print(tmp_stock)
print(glue("Progress: {x/length(vec.symbols) * 100}%"))
}
dt.temp <- tryCatch({
if (bln.all){
getSymbols(Symbols = tmp_stock, auto.assign = FALSE)
} else{
getSymbols(Symbols = tmp_stock, from = start_date, to = end_date, auto.assign = FALSE)
}
},
error = function(cond){
return(data.table())
},
warning = function(cond){
return (data.table())
})
if (nrow(dt.temp)){
lst.dates <- index(dt.temp)
dt.temp <- data.table(dt.temp)
dt.temp$date <- lst.dates
dt.temp$symbol <- tmp_stock
colnames(dt.temp) <- c("open", "high", "low", "close", "volume", "adjusted_close", "dt", "symbol")
# Skip stock if volume is 0 but not if it's an index
if (any(dt.temp$volume == 0) & !grepl("%5E", tmp_stock)){
return (data.table())
}
dt.temp$returns <- returns(dt.temp$adjusted_close) + 1
dt.temp <- dt.temp[!is.na(returns)]
return (dt.temp)
} else{
return (data.table())
}
}))
return (dt.return.this)
}
funcCalcVolatility <- function(chr.symbol, start_date, end_date){
dt.stock  <- funcGetStockPrice(c(chr.symbol), as.Date("1960-01-01"), as.Date(end_date))
dt.stock <- dt.stock[dt >= start_date]
dt.stock$returns <- dt.stock$returns - 1
# Calculate 90 days annualized returns volatility
dt.stock$vol_90 <- c(rep(NA, 89), rollapply(data = dt.stock$returns,width=90,FUN=sd) * sqrt(252))
dt.stock <- dt.stock[!is.na(vol_90)]
# Predicted volatility is yesterday's volatility
dt.stock$pred_vol_90 <- c(NA, head(dt.stock$vol_90, -1))
dt.stock <- dt.stock[!is.na(pred_vol_90)]
return (dt.stock)
}
funcPlotVolatility <- function(dt.stock){
chr.symbol <- unique(dt.stock$symbol)
plt <- ggplot() + geom_line(data = dt.stock, aes(x = dt, y = vol_90, color = "Actual Volatility"), group = 1) +
geom_line(data = dt.stock, aes(x = dt, y = pred_vol_90, color = "One Day Lag Volatility"), group = 1) +
theme_bw(base_size = 20) + ggtitle(glue("{chr.symbol} 90 Volatility")) +
scale_colour_manual("",
breaks = c("Actual Volatility", "One Day Lag Volatility"),
values = c("black", "red"))
# Calculate MAE
flt.mae <- sum(abs(dt.stock$vol_90 - dt.stock$pred_vol_90))/nrow(dt.stock)
print(glue("Mean Absolute Error: {flt.mae * 100}%"))
ggplotly(plt)
}
dt.spy <- funcCalcVolatility(chr.symbol = "SPY",start_date = "2005-01-01", end_date = Sys.Date())
dt.tlt <- funcCalcVolatility(chr.symbol = "TLT",start_date = "2005-01-01", end_date = Sys.Date())
dt.spy <- funcCalcVolatility(chr.symbol = "SPY",start_date = "2005-01-01", end_date = Sys.Date())
dt.spy
library(quantmod)
library(lattice)
library(timeSeries)
library(tseries)
library(rugarch)
library(data.table)
library(ggplot2)
library(glue)
library(parallel)
library(plotly)
funcGetStockPrice <- function(vec.symbols, start_date = Sys.Date() - 20, end_date = Sys.Date(), bln.all = FALSE,
verbose = FALSE){
dt.return.this <- rbindlist(lapply(1:length(vec.symbols), function(x){
tmp_stock <- vec.symbols[x]
if (verbose){
print(tmp_stock)
print(glue("Progress: {x/length(vec.symbols) * 100}%"))
}
dt.temp <- tryCatch({
if (bln.all){
getSymbols(Symbols = tmp_stock, auto.assign = FALSE)
} else{
getSymbols(Symbols = tmp_stock, from = start_date, to = end_date, auto.assign = FALSE)
}
},
error = function(cond){
return(data.table())
},
warning = function(cond){
return (data.table())
})
if (nrow(dt.temp)){
lst.dates <- index(dt.temp)
dt.temp <- data.table(dt.temp)
dt.temp$date <- lst.dates
dt.temp$symbol <- tmp_stock
colnames(dt.temp) <- c("open", "high", "low", "close", "volume", "adjusted_close", "dt", "symbol")
# Skip stock if volume is 0 but not if it's an index
if (any(dt.temp$volume == 0) & !grepl("%5E", tmp_stock)){
return (data.table())
}
dt.temp$returns <- returns(dt.temp$adjusted_close) + 1
dt.temp <- dt.temp[!is.na(returns)]
return (dt.temp)
} else{
return (data.table())
}
}))
return (dt.return.this)
}
funcCalcVolatility <- function(chr.symbol, start_date, end_date, lookback = 90){
dt.stock  <- funcGetStockPrice(c(chr.symbol), as.Date("1960-01-01"), as.Date(end_date))
dt.stock <- dt.stock[dt >= start_date]
dt.stock$returns <- dt.stock$returns - 1
# Calculate 90 days annualized returns volatility
dt.stock$vol_90 <- c(rep(NA, lookback-1), rollapply(data = dt.stock$returns,width=lookback,FUN=sd) * sqrt(252))
dt.stock <- dt.stock[!is.na(vol_90)]
# Predicted volatility is yesterday's volatility
dt.stock$pred_vol_90 <- c(NA, head(dt.stock$vol_90, -1))
dt.stock <- dt.stock[!is.na(pred_vol_90)]
return (dt.stock)
}
funcPlotVolatility <- function(dt.stock){
chr.symbol <- unique(dt.stock$symbol)
plt <- ggplot() + geom_line(data = dt.stock, aes(x = dt, y = vol_90, color = "Actual Volatility"), group = 1) +
geom_line(data = dt.stock, aes(x = dt, y = pred_vol_90, color = "One Day Lag Volatility"), group = 1) +
theme_bw(base_size = 20) + ggtitle(glue("{chr.symbol} 90 Volatility")) +
scale_colour_manual("",
breaks = c("Actual Volatility", "One Day Lag Volatility"),
values = c("black", "red"))
# Calculate MAE
flt.mae <- sum(abs(dt.stock$vol_90 - dt.stock$pred_vol_90))/nrow(dt.stock)
print(glue("Mean Absolute Error: {flt.mae * 100}%"))
ggplotly(plt)
}
dt.spy <- funcCalcVolatility(chr.symbol = "SPY",start_date = "2005-01-01", end_date = Sys.Date(), lookback = 10)
dt.tlt <- funcCalcVolatility(chr.symbol = "TLT",start_date = "2005-01-01", end_date = Sys.Date(), lookback = 10)
funcPlotVolatility(dt.spy)
funcPlotVolatility(dt.tlt)
library(data.table)
library(ggplot2)
library(plotly)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
parent_dir <- getwd()
dir_path <- paste0(parent_dir, "/results_combinations/")
result_list <- setdiff(list.files(dir_path),list.dirs(dir_path,recursive=F, full.names = F))
dt.results <- rbindlist(lapply(result_list, function(x) {
print(x)
fread(paste0(dir_path, "/", x))}))
dt.results[,V1 := NULL]
dt.results[,score_delta := as.numeric(score_delta)]
dt.results[,sharpe_ratio := as.numeric(sharpe_ratio)]
dt.results <- dt.results[status != "ERROR"]
dt.results[,strategy := paste(head(unlist(strsplit(alpha_id, "\\_")), -1), collapse = "_"), by = 1:nrow(dt.results)]
my_plot <- ggplot(dt.results, aes(x = sharpe_ratio, score_delta, text = paste0("alpha_id: ", alpha_id,
"\nturn_over: ", turn_over,
"\nfitness: ", fitness,
"\nreturns: ", returns),
color = status)) + geom_point(size = 1.5) +
geom_hline(yintercept = 0, size=1) + geom_vline(xintercept = 0, size=1) + geom_vline(xintercept = 1.25, size = 1, color = "red")
ggplotly(my_plot)
# Get the best sharpe ratio for each strategy
dt.results[dt.results[, .I[sharpe_ratio == max(sharpe_ratio)], by=strategy]$V1]
dt.results_good <- dt.results[sharpe_ratio > 1.25 & score_delta > 300 & score_delta <= 400]
dt.results_good[order(score_delta, decreasing = TRUE)]
library(data.table)
library(ggplot2)
library(plotly)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
parent_dir <- getwd()
dir_path <- paste0(parent_dir, "/results_combinations/")
result_list <- setdiff(list.files(dir_path),list.dirs(dir_path,recursive=F, full.names = F))
dt.results <- rbindlist(lapply(result_list, function(x) {
print(x)
fread(paste0(dir_path, "/", x))}))
dt.results[,V1 := NULL]
dt.results[,score_delta := as.numeric(score_delta)]
dt.results[,sharpe_ratio := as.numeric(sharpe_ratio)]
dt.results <- dt.results[status != "ERROR"]
dt.results[,strategy := paste(head(unlist(strsplit(alpha_id, "\\_")), -1), collapse = "_"), by = 1:nrow(dt.results)]
my_plot <- ggplot(dt.results, aes(x = sharpe_ratio, score_delta, text = paste0("alpha_id: ", alpha_id,
"\nturn_over: ", turn_over,
"\nfitness: ", fitness,
"\nreturns: ", returns),
color = status)) + geom_point(size = 1.5) +
geom_hline(yintercept = 0, size=1) + geom_vline(xintercept = 0, size=1) + geom_vline(xintercept = 1.25, size = 1, color = "red")
ggplotly(my_plot)
# Get the best sharpe ratio for each strategy
dt.results[dt.results[, .I[sharpe_ratio == max(sharpe_ratio)], by=strategy]$V1]
dt.results_good <- dt.results[sharpe_ratio > 1.25 & score_delta > 300 & score_delta <= 400]
dt.results_good[order(score_delta, decreasing = TRUE)]
library(data.table)
library(ggplot2)
library(plotly)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
parent_dir <- getwd()
dir_path <- paste0(parent_dir, "/results_combinations/")
result_list <- setdiff(list.files(dir_path),list.dirs(dir_path,recursive=F, full.names = F))
dt.results <- rbindlist(lapply(result_list, function(x) {
print(x)
fread(paste0(dir_path, "/", x))}))
dt.results[,V1 := NULL]
dt.results[,score_delta := as.numeric(score_delta)]
dt.results[,sharpe_ratio := as.numeric(sharpe_ratio)]
dt.results <- dt.results[status != "ERROR"]
dt.results[,strategy := paste(head(unlist(strsplit(alpha_id, "\\_")), -1), collapse = "_"), by = 1:nrow(dt.results)]
my_plot <- ggplot(dt.results, aes(x = sharpe_ratio, score_delta, text = paste0("alpha_id: ", alpha_id,
"\nturn_over: ", turn_over,
"\nfitness: ", fitness,
"\nreturns: ", returns),
color = status)) + geom_point(size = 1.5) +
geom_hline(yintercept = 0, size=1) + geom_vline(xintercept = 0, size=1) + geom_vline(xintercept = 1.25, size = 1, color = "red")
ggplotly(my_plot)
# Get the best sharpe ratio for each strategy
dt.results[dt.results[, .I[sharpe_ratio == max(sharpe_ratio)], by=strategy]$V1]
dt.results_good <- dt.results[sharpe_ratio > 1.25 & score_delta > 300 & score_delta <= 400]
dt.results_good[order(score_delta, decreasing = TRUE)]
library(data.table)
library(ggplot2)
library(plotly)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
parent_dir <- getwd()
dir_path <- paste0(parent_dir, "/results_combinations/")
result_list <- setdiff(list.files(dir_path),list.dirs(dir_path,recursive=F, full.names = F))
dt.results <- rbindlist(lapply(result_list, function(x) {
print(x)
fread(paste0(dir_path, "/", x))}))
dt.results[,V1 := NULL]
dt.results[,score_delta := as.numeric(score_delta)]
dt.results[,sharpe_ratio := as.numeric(sharpe_ratio)]
dt.results <- dt.results[status != "ERROR"]
dt.results[,strategy := paste(head(unlist(strsplit(alpha_id, "\\_")), -1), collapse = "_"), by = 1:nrow(dt.results)]
my_plot <- ggplot(dt.results, aes(x = sharpe_ratio, score_delta, text = paste0("alpha_id: ", alpha_id,
"\nturn_over: ", turn_over,
"\nfitness: ", fitness,
"\nreturns: ", returns),
color = status)) + geom_point(size = 1.5) +
geom_hline(yintercept = 0, size=1) + geom_vline(xintercept = 0, size=1) + geom_vline(xintercept = 1.25, size = 1, color = "red")
ggplotly(my_plot)
# Get the best sharpe ratio for each strategy
dt.results[dt.results[, .I[sharpe_ratio == max(sharpe_ratio)], by=strategy]$V1]
dt.results_good <- dt.results[sharpe_ratio > 1.25 & score_delta > 300 & score_delta <= 400]
dt.results_good[order(score_delta, decreasing = TRUE)]
library(data.table)
library(ggplot2)
library(plotly)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
parent_dir <- getwd()
dir_path <- paste0(parent_dir, "/results_combinations/")
result_list <- setdiff(list.files(dir_path),list.dirs(dir_path,recursive=F, full.names = F))
dt.results <- rbindlist(lapply(result_list, function(x) {
print(x)
fread(paste0(dir_path, "/", x))}))
dt.results[,V1 := NULL]
dt.results[,score_delta := as.numeric(score_delta)]
dt.results[,sharpe_ratio := as.numeric(sharpe_ratio)]
dt.results <- dt.results[status != "ERROR"]
dt.results[,strategy := paste(head(unlist(strsplit(alpha_id, "\\_")), -1), collapse = "_"), by = 1:nrow(dt.results)]
my_plot <- ggplot(dt.results, aes(x = sharpe_ratio, score_delta, text = paste0("alpha_id: ", alpha_id,
"\nturn_over: ", turn_over,
"\nfitness: ", fitness,
"\nreturns: ", returns),
color = status)) + geom_point(size = 1.5) +
geom_hline(yintercept = 0, size=1) + geom_vline(xintercept = 0, size=1) + geom_vline(xintercept = 1.25, size = 1, color = "red")
ggplotly(my_plot)
# Get the best sharpe ratio for each strategy
dt.results[dt.results[, .I[sharpe_ratio == max(sharpe_ratio)], by=strategy]$V1]
dt.results_good <- dt.results[sharpe_ratio > 1.25 & score_delta > 300 & score_delta <= 400]
dt.results_good[order(score_delta, decreasing = TRUE)]
dt.results_good <- dt.results[sharpe_ratio > 1.25]
dt.results_good[order(score_delta, decreasing = TRUE)]
library(data.table)
library(ggplot2)
library(plotly)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
parent_dir <- getwd()
dir_path <- paste0(parent_dir, "/results_combinations/")
result_list <- setdiff(list.files(dir_path),list.dirs(dir_path,recursive=F, full.names = F))
dt.results <- rbindlist(lapply(result_list, function(x) {
print(x)
fread(paste0(dir_path, "/", x))}))
dt.results[,V1 := NULL]
dt.results[,score_delta := as.numeric(score_delta)]
dt.results[,sharpe_ratio := as.numeric(sharpe_ratio)]
dt.results <- dt.results[status != "ERROR"]
dt.results[,strategy := paste(head(unlist(strsplit(alpha_id, "\\_")), -1), collapse = "_"), by = 1:nrow(dt.results)]
my_plot <- ggplot(dt.results, aes(x = sharpe_ratio, score_delta, text = paste0("alpha_id: ", alpha_id,
"\nturn_over: ", turn_over,
"\nfitness: ", fitness,
"\nreturns: ", returns),
color = status)) + geom_point(size = 1.5) +
geom_hline(yintercept = 0, size=1) + geom_vline(xintercept = 0, size=1) + geom_vline(xintercept = 1.25, size = 1, color = "red")
ggplotly(my_plot)
# Get the best sharpe ratio for each strategy
dt.results[dt.results[, .I[sharpe_ratio == max(sharpe_ratio)], by=strategy]$V1]
dt.results_good <- dt.results[sharpe_ratio > 1.25]
dt.results_good[order(score_delta, decreasing = TRUE)]
library(data.table)
library(ggplot2)
library(plotly)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
parent_dir <- getwd()
dir_path <- paste0(parent_dir, "/results_combinations/")
result_list <- setdiff(list.files(dir_path),list.dirs(dir_path,recursive=F, full.names = F))
dt.results <- rbindlist(lapply(result_list, function(x) {
print(x)
fread(paste0(dir_path, "/", x))}))
dt.results[,V1 := NULL]
dt.results[,score_delta := as.numeric(score_delta)]
dt.results[,sharpe_ratio := as.numeric(sharpe_ratio)]
dt.results <- dt.results[status != "ERROR"]
dt.results[,strategy := paste(head(unlist(strsplit(alpha_id, "\\_")), -1), collapse = "_"), by = 1:nrow(dt.results)]
my_plot <- ggplot(dt.results, aes(x = sharpe_ratio, score_delta, text = paste0("alpha_id: ", alpha_id,
"\nturn_over: ", turn_over,
"\nfitness: ", fitness,
"\nreturns: ", returns),
color = status)) + geom_point(size = 1.5) +
geom_hline(yintercept = 0, size=1) + geom_vline(xintercept = 0, size=1) + geom_vline(xintercept = 1.25, size = 1, color = "red")
ggplotly(my_plot)
# Get the best sharpe ratio for each strategy
dt.results[dt.results[, .I[sharpe_ratio == max(sharpe_ratio)], by=strategy]$V1]
dt.results_good <- dt.results[sharpe_ratio > 1.25]
dt.results_good[order(score_delta, decreasing = TRUE)]
dt.results_good <- dt.results[sharpe_ratio > 1.25 & status == "PASS"]
dt.results_good[order(score_delta, decreasing = TRUE)]
dt.results_good <- dt.results[sharpe_ratio > 1.25 & status == "PASS" & score_delta > 0]
dt.results_good[order(score_delta, decreasing = TRUE)]
library(data.table)
library(ggplot2)
library(plotly)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
parent_dir <- getwd()
dir_path <- paste0(parent_dir, "/results_combinations/")
result_list <- setdiff(list.files(dir_path),list.dirs(dir_path,recursive=F, full.names = F))
dt.results <- rbindlist(lapply(result_list, function(x) {
print(x)
fread(paste0(dir_path, "/", x))}))
dt.results[,V1 := NULL]
dt.results[,score_delta := as.numeric(score_delta)]
dt.results[,sharpe_ratio := as.numeric(sharpe_ratio)]
dt.results <- dt.results[status != "ERROR"]
dt.results[,strategy := paste(head(unlist(strsplit(alpha_id, "\\_")), -1), collapse = "_"), by = 1:nrow(dt.results)]
my_plot <- ggplot(dt.results, aes(x = sharpe_ratio, score_delta, text = paste0("alpha_id: ", alpha_id,
"\nturn_over: ", turn_over,
"\nfitness: ", fitness,
"\nreturns: ", returns),
color = status)) + geom_point(size = 1.5) +
geom_hline(yintercept = 0, size=1) + geom_vline(xintercept = 0, size=1) + geom_vline(xintercept = 1.25, size = 1, color = "red")
ggplotly(my_plot)
# Get the best sharpe ratio for each strategy
dt.results[dt.results[, .I[sharpe_ratio == max(sharpe_ratio)], by=strategy]$V1]
dt.results_good <- dt.results[sharpe_ratio > 1.25 & status == "PASS" & score_delta > 0]
dt.results_good[order(score_delta, decreasing = TRUE)]
library(data.table)
library(ggplot2)
library(plotly)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
parent_dir <- getwd()
dir_path <- paste0(parent_dir, "/results_combinations/")
result_list <- setdiff(list.files(dir_path),list.dirs(dir_path,recursive=F, full.names = F))
dt.results <- rbindlist(lapply(result_list, function(x) {
print(x)
fread(paste0(dir_path, "/", x))}))
dt.results[,V1 := NULL]
dt.results[,score_delta := as.numeric(score_delta)]
dt.results[,sharpe_ratio := as.numeric(sharpe_ratio)]
dt.results <- dt.results[status != "ERROR"]
dt.results[,strategy := paste(head(unlist(strsplit(alpha_id, "\\_")), -1), collapse = "_"), by = 1:nrow(dt.results)]
my_plot <- ggplot(dt.results, aes(x = sharpe_ratio, score_delta, text = paste0("alpha_id: ", alpha_id,
"\nturn_over: ", turn_over,
"\nfitness: ", fitness,
"\nreturns: ", returns),
color = status)) + geom_point(size = 1.5) +
geom_hline(yintercept = 0, size=1) + geom_vline(xintercept = 0, size=1) + geom_vline(xintercept = 1.25, size = 1, color = "red")
ggplotly(my_plot)
# Get the best sharpe ratio for each strategy
dt.results[dt.results[, .I[sharpe_ratio == max(sharpe_ratio)], by=strategy]$V1]
dt.results_good <- dt.results[sharpe_ratio > 1.25 & status == "PASS" & score_delta > 0]
dt.results_good[order(score_delta, decreasing = TRUE)]
library(data.table)
library(ggplot2)
library(plotly)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
parent_dir <- getwd()
dir_path <- paste0(parent_dir, "/results_combinations/")
result_list <- setdiff(list.files(dir_path),list.dirs(dir_path,recursive=F, full.names = F))
dt.results <- rbindlist(lapply(result_list, function(x) {
print(x)
fread(paste0(dir_path, "/", x))}))
dt.results[,V1 := NULL]
dt.results[,score_delta := as.numeric(score_delta)]
dt.results[,sharpe_ratio := as.numeric(sharpe_ratio)]
dt.results <- dt.results[status != "ERROR"]
dt.results[,strategy := paste(head(unlist(strsplit(alpha_id, "\\_")), -1), collapse = "_"), by = 1:nrow(dt.results)]
my_plot <- ggplot(dt.results, aes(x = sharpe_ratio, score_delta, text = paste0("alpha_id: ", alpha_id,
"\nturn_over: ", turn_over,
"\nfitness: ", fitness,
"\nreturns: ", returns),
color = status)) + geom_point(size = 1.5) +
geom_hline(yintercept = 0, size=1) + geom_vline(xintercept = 0, size=1) + geom_vline(xintercept = 1.25, size = 1, color = "red")
ggplotly(my_plot)
# Get the best sharpe ratio for each strategy
dt.results[dt.results[, .I[sharpe_ratio == max(sharpe_ratio)], by=strategy]$V1]
dt.results_good <- dt.results[sharpe_ratio > 1.25 & status == "PASS" & score_delta > 0]
dt.results_good[order(score_delta, decreasing = TRUE)]
library(data.table)
library(ggplot2)
library(plotly)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
parent_dir <- getwd()
dir_path <- paste0(parent_dir, "/results_combinations/")
result_list <- setdiff(list.files(dir_path),list.dirs(dir_path,recursive=F, full.names = F))
dt.results <- rbindlist(lapply(result_list, function(x) {
print(x)
fread(paste0(dir_path, "/", x))}))
dt.results[,V1 := NULL]
dt.results[,score_delta := as.numeric(score_delta)]
dt.results[,sharpe_ratio := as.numeric(sharpe_ratio)]
dt.results <- dt.results[status != "ERROR"]
dt.results[,strategy := paste(head(unlist(strsplit(alpha_id, "\\_")), -1), collapse = "_"), by = 1:nrow(dt.results)]
my_plot <- ggplot(dt.results, aes(x = sharpe_ratio, score_delta, text = paste0("alpha_id: ", alpha_id,
"\nturn_over: ", turn_over,
"\nfitness: ", fitness,
"\nreturns: ", returns),
color = status)) + geom_point(size = 1.5) +
geom_hline(yintercept = 0, size=1) + geom_vline(xintercept = 0, size=1) + geom_vline(xintercept = 1.25, size = 1, color = "red")
ggplotly(my_plot)
# Get the best sharpe ratio for each strategy
dt.results[dt.results[, .I[sharpe_ratio == max(sharpe_ratio)], by=strategy]$V1]
dt.results_good <- dt.results[sharpe_ratio > 1.25 & status == "PASS" & score_delta > 0]
dt.results_good[order(score_delta, decreasing = TRUE)]
library(data.table)
library(ggplot2)
library(plotly)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
parent_dir <- getwd()
dir_path <- paste0(parent_dir, "/results_combinations/fundamental_estimate_actual_ratio_sum/")
result_list <- setdiff(list.files(dir_path),list.dirs(dir_path,recursive=F, full.names = F))
dt.results <- rbindlist(lapply(result_list, function(x) {
print(x)
fread(paste0(dir_path, "/", x))}))
dt.results[,V1 := NULL]
dt.results[,score_delta := as.numeric(score_delta)]
dt.results[,sharpe_ratio := as.numeric(sharpe_ratio)]
dt.results <- dt.results[status != "ERROR"]
dt.results[,strategy := paste(head(unlist(strsplit(alpha_id, "\\_")), -1), collapse = "_"), by = 1:nrow(dt.results)]
my_plot <- ggplot(dt.results, aes(x = sharpe_ratio, score_delta, text = paste0("alpha_id: ", alpha_id,
"\nturn_over: ", turn_over,
"\nfitness: ", fitness,
"\nreturns: ", returns),
color = status)) + geom_point(size = 1.5) +
geom_hline(yintercept = 0, size=1) + geom_vline(xintercept = 0, size=1) + geom_vline(xintercept = 1.25, size = 1, color = "red")
ggplotly(my_plot)
# Get the best sharpe ratio for each strategy
dt.results[dt.results[, .I[sharpe_ratio == max(sharpe_ratio)], by=strategy]$V1]
dt.results_good <- dt.results[sharpe_ratio > 1.25 & status == "PASS" & score_delta > 0]
dt.results_good[order(score_delta, decreasing = TRUE)]
