if (verbose){
print(tmp_stock)
print(glue("Progress: {x/length(vec.symbols) * 100}%"))
}
dt.temp <- tryCatch({
if (bln.all){
getSymbols(Symbols = tmp_stock, auto.assign = FALSE)
} else{
getSymbols(Symbols = tmp_stock, from = start_date, to = end_date, auto.assign = FALSE)
}
},
error = function(cond){
return(data.table())
},
warning = function(cond){
return (data.table())
})
if (nrow(dt.temp)){
lst.dates <- index(dt.temp)
dt.temp <- data.table(dt.temp)
dt.temp$date <- lst.dates
dt.temp$symbol <- tmp_stock
colnames(dt.temp) <- c("open", "high", "low", "close", "volume", "adjusted_close", "dt", "symbol")
# Skip stock if volume is 0 but not if it's an index
if (any(dt.temp$volume == 0) & !grepl("%5E", tmp_stock)){
return (data.table())
}
dt.temp$returns <- returns(dt.temp$adjusted_close) + 1
dt.temp <- dt.temp[!is.na(returns)]
return (dt.temp)
} else{
return (data.table())
}
}))
return (dt.return.this)
}
funcCalcVolatility <- function(chr.symbol, start_date, end_date){
dt.stock  <- funcGetStockPrice(c(chr.symbol), as.Date("1960-01-01"), as.Date(end_date))
dt.stock <- dt.stock[dt >= start_date]
dt.stock$returns <- dt.stock$returns - 1
# Calculate 90 days annualized returns volatility
dt.stock$vol_90 <- c(rep(NA, 89), rollapply(data = dt.stock$returns,width=90,FUN=sd) * sqrt(252))
dt.stock <- dt.stock[!is.na(vol_90)]
# Predicted volatility is yesterday's volatility
dt.stock$pred_vol_90 <- c(NA, head(dt.stock$vol_90, -1))
dt.stock <- dt.stock[!is.na(pred_vol_90)]
return (dt.stock)
}
funcPlotVolatility <- function(dt.stock){
chr.symbol <- unique(dt.stock$symbol)
plt <- ggplot() + geom_line(data = dt.stock, aes(x = dt, y = vol_90, color = "Actual Volatility"), group = 1) +
geom_line(data = dt.stock, aes(x = dt, y = pred_vol_90, color = "One Day Lag Volatility"), group = 1) +
theme_bw(base_size = 20) + ggtitle(glue("{chr.symbol} 90 Volatility")) +
scale_colour_manual("",
breaks = c("Actual Volatility", "One Day Lag Volatility"),
values = c("black", "red"))
# Calculate MAE
flt.mae <- sum(abs(dt.stock$vol_90 - dt.stock$pred_vol_90))/nrow(dt.stock)
print(glue("Mean Absolute Error: {flt.mae * 100}%"))
ggplotly(plt)
}
dt.spy <- funcCalcVolatility(chr.symbol = "SPY",start_date = "2005-01-01", end_date = Sys.Date())
dt.tlt <- funcCalcVolatility(chr.symbol = "TLT",start_date = "2005-01-01", end_date = Sys.Date())
dt.spy <- funcCalcVolatility(chr.symbol = "SPY",start_date = "2005-01-01", end_date = Sys.Date())
dt.spy
library(quantmod)
library(lattice)
library(timeSeries)
library(tseries)
library(rugarch)
library(data.table)
library(ggplot2)
library(glue)
library(parallel)
library(plotly)
funcGetStockPrice <- function(vec.symbols, start_date = Sys.Date() - 20, end_date = Sys.Date(), bln.all = FALSE,
verbose = FALSE){
dt.return.this <- rbindlist(lapply(1:length(vec.symbols), function(x){
tmp_stock <- vec.symbols[x]
if (verbose){
print(tmp_stock)
print(glue("Progress: {x/length(vec.symbols) * 100}%"))
}
dt.temp <- tryCatch({
if (bln.all){
getSymbols(Symbols = tmp_stock, auto.assign = FALSE)
} else{
getSymbols(Symbols = tmp_stock, from = start_date, to = end_date, auto.assign = FALSE)
}
},
error = function(cond){
return(data.table())
},
warning = function(cond){
return (data.table())
})
if (nrow(dt.temp)){
lst.dates <- index(dt.temp)
dt.temp <- data.table(dt.temp)
dt.temp$date <- lst.dates
dt.temp$symbol <- tmp_stock
colnames(dt.temp) <- c("open", "high", "low", "close", "volume", "adjusted_close", "dt", "symbol")
# Skip stock if volume is 0 but not if it's an index
if (any(dt.temp$volume == 0) & !grepl("%5E", tmp_stock)){
return (data.table())
}
dt.temp$returns <- returns(dt.temp$adjusted_close) + 1
dt.temp <- dt.temp[!is.na(returns)]
return (dt.temp)
} else{
return (data.table())
}
}))
return (dt.return.this)
}
funcCalcVolatility <- function(chr.symbol, start_date, end_date, lookback = 90){
dt.stock  <- funcGetStockPrice(c(chr.symbol), as.Date("1960-01-01"), as.Date(end_date))
dt.stock <- dt.stock[dt >= start_date]
dt.stock$returns <- dt.stock$returns - 1
# Calculate 90 days annualized returns volatility
dt.stock$vol_90 <- c(rep(NA, lookback-1), rollapply(data = dt.stock$returns,width=lookback,FUN=sd) * sqrt(252))
dt.stock <- dt.stock[!is.na(vol_90)]
# Predicted volatility is yesterday's volatility
dt.stock$pred_vol_90 <- c(NA, head(dt.stock$vol_90, -1))
dt.stock <- dt.stock[!is.na(pred_vol_90)]
return (dt.stock)
}
funcPlotVolatility <- function(dt.stock){
chr.symbol <- unique(dt.stock$symbol)
plt <- ggplot() + geom_line(data = dt.stock, aes(x = dt, y = vol_90, color = "Actual Volatility"), group = 1) +
geom_line(data = dt.stock, aes(x = dt, y = pred_vol_90, color = "One Day Lag Volatility"), group = 1) +
theme_bw(base_size = 20) + ggtitle(glue("{chr.symbol} 90 Volatility")) +
scale_colour_manual("",
breaks = c("Actual Volatility", "One Day Lag Volatility"),
values = c("black", "red"))
# Calculate MAE
flt.mae <- sum(abs(dt.stock$vol_90 - dt.stock$pred_vol_90))/nrow(dt.stock)
print(glue("Mean Absolute Error: {flt.mae * 100}%"))
ggplotly(plt)
}
dt.spy <- funcCalcVolatility(chr.symbol = "SPY",start_date = "2005-01-01", end_date = Sys.Date(), lookback = 10)
dt.tlt <- funcCalcVolatility(chr.symbol = "TLT",start_date = "2005-01-01", end_date = Sys.Date(), lookback = 10)
funcPlotVolatility(dt.spy)
funcPlotVolatility(dt.tlt)
beta <- seq(from = 0, to = 10000, by = 1)
beta
f_beta <- (beta^2+2*beta)/((beta+1)^2)
f_beta
plot(beta, f_beta)
beta <- seq(from = 0, to = 100, by = 0.01)
f_beta <- (beta^2+2*beta)/((beta+1)^2)
f_beta
ggplot() + geom_line(x = beta, y = f_beta)
library(ggplot2)
beta <- seq(from = 0, to = 100, by = 0.01)
f_beta <- (beta^2+2*beta)/((beta+1)^2)
ggplot() + geom_line(x = beta, y = f_beta)
ggplot() + geom_line(data = (x = beta, y = f_beta))
ggplot(dt_data) + geom_line(data = aes(x = beta, y = f_beta)) + theme_bw(base_size = 15)
library(ggplot2)
library(data.table)
beta <- seq(from = 0, to = 100, by = 0.01)
f_beta <- (beta^2+2*beta)/((beta+1)^2)
dt_data <- data.table(beta = beta,
f_beta = f_beta)
ggplot(dt_data) + geom_line(data = aes(x = beta, y = f_beta)) + theme_bw(base_size = 15)
data.table(beta = beta,
f_beta = f_beta)
dt_data
ggplot(dt_data) + geom_line(aes(x = beta, y = f_beta)) + theme_bw(base_size = 15)
ggplot(dt_data) + geom_line(aes(x = beta, y = f_beta), size = 1.5) + theme_bw(base_size = 15)
library(ggplot2)
library(data.table)
beta <- seq(from = 0, to = 10, by = 0.01)
f_beta <- (beta^2+2*beta)/((beta+1)^2)
dt_data <- data.table(beta = beta,
f_beta = f_beta)
ggplot(dt_data) + geom_line(aes(x = beta, y = f_beta), size = 1.5) + theme_bw(base_size = 15)
library(ggplot2)
library(data.table)
beta <- seq(from = 0, to = 10, by = 0.01)
f_beta <- (beta^2+2*beta)/((beta+1)^2)
dt_data <- data.table(beta = beta,
f_beta = f_beta)
ggplot(dt_data) +
geom_line(aes(x = beta, y = f_beta), size = 1.5) +
geom_hline(yintercept = 1, linetype = "dashed")
theme_bw(base_size = 15)
library(ggplot2)
library(data.table)
beta <- seq(from = 0, to = 10, by = 0.01)
f_beta <- (beta^2+2*beta)/((beta+1)^2)
dt_data <- data.table(beta = beta,
f_beta = f_beta)
ggplot(dt_data) +
geom_line(aes(x = beta, y = f_beta), size = 1.5) +
geom_hline(yintercept = 1, linetype = "dashed") +
theme_bw(base_size = 15)
library(ggplot2)
library(data.table)
beta <- seq(from = 0, to = 10, by = 0.01)
f_beta <- (beta^2+2*beta)/((beta+1)^2)
dt_data <- data.table(beta = beta,
f_beta = f_beta)
ggplot(dt_data) +
geom_line(aes(x = beta, y = f_beta), size = 1.5) +
geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
theme_bw(base_size = 15)
library(ggplot2)
library(data.table)
beta <- seq(from = 0, to = 10, by = 0.01)
f_beta <- (beta^2+2*beta)/((beta+1)^2)
dt_data <- data.table(beta = beta,
f_beta = f_beta)
ggplot(dt_data) +
geom_line(aes(x = beta, y = f_beta), size = 1.5) +
geom_hline(yintercept = 1, linetype = "dashed", color = "red", size = 1.5) +
theme_bw(base_size = 15)
1:2
library(data.table)
library(glue)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
parent_dir <- getwd()
factor_list <- c("open", "close", "high", "low", "vwap")
num_factors <- length(factor_list)
function_list <- c("normalize", "scale", "rank", "zscore")
dt.write.this <- data.table()
# Form 1: A
for (func in function_list){
for (factor in factor_list){
charTemp <- paste0(func, "(", factor, ")")
dt.write.this <- rbind(dt.write.this, data.table(code = charTemp))
}
}
# Form 2: A + B
for (func in function_list){
for (i in 1:(num_factors-1)){
for (j in (i+1):(num_factors)){
factorA <- factor_list[i]
factorB <- factor_list[j]
charTemp <- paste0(func, "(", factorA, "+", factorB, ")")
dt.write.this <- rbind(dt.write.this, data.table(code = charTemp))
}
}
}
# Form 3: A - B
for (func in function_list){
for (i in 1:(num_factors-1)){
for (j in (i+1):(num_factors)){
factorA <- factor_list[i]
factorB <- factor_list[j]
charTemp <- paste0(func, "(", factorA, "-", factorB, ")")
dt.write.this <- rbind(dt.write.this, data.table(code = charTemp))
}
}
}
dt.write.this
library(data.table)
library(glue)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
parent_dir <- getwd()
factor_list <- c("open", "close", "high", "low", "vwap")
num_factors <- length(factor_list)
function_list <- c("normalize", "scale", "rank", "zscore")
dt.write.this <- data.table()
# Form 1: A
for (func in function_list){
for (factor in factor_list){
charTemp <- paste0(func, "(", factor, ")")
dt.write.this <- rbind(dt.write.this, data.table(code = charTemp))
}
}
# Form 2: A + B
for (func in function_list){
for (i in 1:(num_factors-1)){
for (j in (i+1):(num_factors)){
factorA <- factor_list[i]
factorB <- factor_list[j]
charTemp1 <- paste0(func, "(", factorA, "+", factorB, ")")
charTemp2 <- paste0(func, "(", factorB, "+", factorA, ")")
dt.write.this <- rbind(dt.write.this, data.table(code = charTemp1))
dt.write.this <- rbind(dt.write.this, data.table(code = charTemp2))
}
}
}
# Form 3: A - B
for (func in function_list){
for (i in 1:(num_factors-1)){
for (j in (i+1):(num_factors)){
factorA <- factor_list[i]
factorB <- factor_list[j]
charTemp1 <- paste0(func, "(", factorA, "-", factorB, ")")
charTemp2 <- paste0(func, "(", factorB, "-", factorA, ")")
dt.write.this <- rbind(dt.write.this, data.table(code = charTemp1))
dt.write.this <- rbind(dt.write.this, data.table(code = charTemp2))
}
}
}
# Form 4: A / B
for (func in function_list){
for (i in 1:(num_factors-1)){
for (j in (i+1):(num_factors)){
factorA <- factor_list[i]
factorB <- factor_list[j]
charTemp1 <- paste0(func, "(", factorA, "/", factorB, ")")
charTemp2 <- paste0(func, "(", factorB, "/", factorA, ")")
dt.write.this <- rbind(dt.write.this, data.table(code = charTemp1))
dt.write.this <- rbind(dt.write.this, data.table(code = charTemp2))
}
}
}
# Form 5: (A + B)/(C + D)
dt.write.this
i <- 1
j <- 2
k <- 1
factorA <- factor_list[i]
factorB <- factor_list[j]
factorC <- factor_list[k]
charTemp1 <- paste0(func, "((", factorA, "+", factorB, ")/(", factorC, "))")
charTemp1
library(data.table)
library(glue)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
parent_dir <- getwd()
factor_list <- c("open", "close", "high", "low", "vwap")
num_factors <- length(factor_list)
function_list <- c("normalize", "scale", "rank", "zscore")
dt.write.this <- data.table()
# Form 1: A
for (func in function_list){
for (factor in factor_list){
charTemp <- paste0(func, "(", factor, ")")
dt.write.this <- rbind(dt.write.this, data.table(code = charTemp))
}
}
# Form 2: A + B
for (func in function_list){
for (i in 1:(num_factors-1)){
for (j in (i+1):(num_factors)){
factorA <- factor_list[i]
factorB <- factor_list[j]
charTemp <- paste0(func, "(", factorA, "+", factorB, ")")
dt.write.this <- rbind(dt.write.this, data.table(code = charTemp))
}
}
}
# Form 3: A - B
for (func in function_list){
for (i in 1:(num_factors-1)){
for (j in (i+1):(num_factors)){
factorA <- factor_list[i]
factorB <- factor_list[j]
charTemp1 <- paste0(func, "(", factorA, "-", factorB, ")")
charTemp2 <- paste0(func, "(", factorB, "-", factorA, ")")
dt.write.this <- rbind(dt.write.this, data.table(code = charTemp1))
dt.write.this <- rbind(dt.write.this, data.table(code = charTemp2))
}
}
}
# Form 4: A / B
for (func in function_list){
for (i in 1:(num_factors-1)){
for (j in (i+1):(num_factors)){
factorA <- factor_list[i]
factorB <- factor_list[j]
charTemp1 <- paste0(func, "(", factorA, "/", factorB, ")")
charTemp2 <- paste0(func, "(", factorB, "/", factorA, ")")
dt.write.this <- rbind(dt.write.this, data.table(code = charTemp1))
dt.write.this <- rbind(dt.write.this, data.table(code = charTemp2))
}
}
}
# Form 5: (A+B)/C
for (func in function_list){
for (i in 1:(num_factors-1)){
for (j in (i+1):(num_factors)){
for (k in 1:num_factors){
factorA <- factor_list[i]
factorB <- factor_list[j]
factorC <- factor_list[k]
charTemp1 <- paste0(func, "((", factorA, "+", factorB, ")/(", factorC, "))")
dt.write.this <- rbind(dt.write.this, data.table(code = charTemp1))
}
}
}
}
# Form 6: (A-B)/C
for (func in function_list){
for (i in 1:(num_factors-1)){
for (j in (i+1):(num_factors)){
for (k in 1:num_factors){
factorA <- factor_list[i]
factorB <- factor_list[j]
factorC <- factor_list[k]
charTemp1 <- paste0(func, "((", factorA, "-", factorB, ")/(", factorC, "))")
charTemp2 <- paste0(func, "((", factorB, "-", factorA, ")/(", factorC, "))")
dt.write.this <- rbind(dt.write.this, data.table(code = charTemp1))
dt.write.this <- rbind(dt.write.this, data.table(code = charTemp2))
}
}
}
}
# Form : (A+B)/(C+D)
dt.write.this
library(data.table)
library(glue)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
parent_dir <- getwd()
factor_list <- c("open", "close", "high", "low", "vwap")
num_factors <- length(factor_list)
function_list <- c("normalize", "scale", "rank", "zscore")
dt.write.this <- data.table()
# Form 1: A
for (func in function_list){
for (factor in factor_list){
charTemp <- paste0(func, "(", factor, ")")
dt.write.this <- rbind(dt.write.this, data.table(code = charTemp))
}
}
# Form 2: A + B
for (func in function_list){
for (i in 1:(num_factors-1)){
for (j in (i+1):(num_factors)){
factorA <- factor_list[i]
factorB <- factor_list[j]
charTemp <- paste0(func, "(", factorA, "+", factorB, ")")
dt.write.this <- rbind(dt.write.this, data.table(code = charTemp))
}
}
}
# Form 3: A - B
for (func in function_list){
for (i in 1:(num_factors-1)){
for (j in (i+1):(num_factors)){
factorA <- factor_list[i]
factorB <- factor_list[j]
charTemp1 <- paste0(func, "(", factorA, "-", factorB, ")")
charTemp2 <- paste0(func, "(", factorB, "-", factorA, ")")
dt.write.this <- rbind(dt.write.this, data.table(code = charTemp1))
dt.write.this <- rbind(dt.write.this, data.table(code = charTemp2))
}
}
}
# Form 4: A / B
for (func in function_list){
for (i in 1:(num_factors-1)){
for (j in (i+1):(num_factors)){
factorA <- factor_list[i]
factorB <- factor_list[j]
charTemp1 <- paste0(func, "(", factorA, "/", factorB, ")")
charTemp2 <- paste0(func, "(", factorB, "/", factorA, ")")
dt.write.this <- rbind(dt.write.this, data.table(code = charTemp1))
dt.write.this <- rbind(dt.write.this, data.table(code = charTemp2))
}
}
}
# Form 5: (A+B)/C
for (func in function_list){
for (i in 1:(num_factors-1)){
for (j in (i+1):(num_factors)){
for (k in 1:num_factors){
factorA <- factor_list[i]
factorB <- factor_list[j]
factorC <- factor_list[k]
charTemp1 <- paste0(func, "((", factorA, "+", factorB, ")/(", factorC, "))")
dt.write.this <- rbind(dt.write.this, data.table(code = charTemp1))
}
}
}
}
# Form 6: (A-B)/C
for (func in function_list){
for (i in 1:(num_factors-1)){
for (j in (i+1):(num_factors)){
for (k in 1:num_factors){
factorA <- factor_list[i]
factorB <- factor_list[j]
factorC <- factor_list[k]
charTemp1 <- paste0(func, "((", factorA, "-", factorB, ")/(", factorC, "))")
charTemp2 <- paste0(func, "((", factorB, "-", factorA, ")/(", factorC, "))")
dt.write.this <- rbind(dt.write.this, data.table(code = charTemp1))
dt.write.this <- rbind(dt.write.this, data.table(code = charTemp2))
}
}
}
}
# Form : (A+B)/(C+D)
for (func in function_list){
for (i in 1:(num_factors-1)){
for (j in (i+1):(num_factors)){
for (k in 1:(num_factors - 1)){
for(l in (k+1):(num_factors)){
factorA <- factor_list[i]
factorB <- factor_list[j]
factorC <- factor_list[k]
factorD <- factor_list[l]
charTemp1 <- paste0(func, "((", factorA, "+", factorB, ")/(", factorC, "+", factorD, "))")
dt.write.this <- rbind(dt.write.this, data.table(code = charTemp1))
}
}
}
}
}
dt.write.this
dt.write.this[,id := 1:nrow(dt.write.this)]
dt.write.this[,file_name := paste0("alpha_", id)]
dt.write.this
for (i in 1:nrow(dt.write.this)){
dt.temp <- dt.write.this[id == i]
writeChar(dt.temp$code, paste0(parent_dir, "/test_combinations/alpha_", i, ".txt"), nchars = nchar(dt.temp$code))
}
