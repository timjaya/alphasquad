dt.results[,sharpe_ratio := as.numeric(sharpe_ratio)]
dt.results <- dt.results[status != "ERROR"]
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
parent_dir <- getwd()
dir_path <- paste0(parent_dir, "/test_combinations/fundamental_estimate_actual_ratio")
alpha_list <- setdiff(list.files(dir_path),list.dirs(dir_path,recursive=F, full.names = F))
alpha_list <- alpha_list[alpha_list %in% dt.results[sharpe_ratio > 0& score_delta > 0]$alpha_id]
dt.write.this <- data.table()
alpha_list
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
parent_dir <- getwd()
dir_path_alt <- paste0(parent_dir, "/results_combinations/fundamental_estimate_actual_ratio_mult")
result_list <- list.files(dir_path_alt)
dt.results <- rbindlist(lapply(result_list, function(x) fread(paste0(dir_path_alt, "/", x))))
dt.results[,V1 := NULL]
dt.results[,score_delta := as.numeric(score_delta)]
dt.results[,sharpe_ratio := as.numeric(sharpe_ratio)]
dt.results <- dt.results[status != "ERROR"]
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
parent_dir <- getwd()
dir_path <- paste0(parent_dir, "/test_combinations/fundamental_estimate_actual_ratio_mult")
alpha_list <- setdiff(list.files(dir_path),list.dirs(dir_path,recursive=F, full.names = F))
alpha_list <- alpha_list[alpha_list %in% dt.results[sharpe_ratio > 0 & score_delta > 0]$alpha_id]
alpha_list
alpha_list <- alpha_list[alpha_list %in% dt.results[sharpe_ratio > 1 & score_delta > 0]$alpha_id]
dt.write.this <- data.table()
alpha_list
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
parent_dir <- getwd()
dir_path_alt <- paste0(parent_dir, "/results_combinations/fundamental_estimate_actual_ratio_mult")
result_list <- list.files(dir_path_alt)
dt.results <- rbindlist(lapply(result_list, function(x) fread(paste0(dir_path_alt, "/", x))))
dt.results[,score_delta := as.numeric(score_delta)]
dt.results[,V1 := NULL]
dt.results[,sharpe_ratio := as.numeric(sharpe_ratio)]
dt.results <- dt.results[status != "ERROR"]
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
parent_dir <- getwd()
dir_path <- paste0(parent_dir, "/test_combinations/fundamental_estimate_actual_ratio_mult")
alpha_list <- setdiff(list.files(dir_path),list.dirs(dir_path,recursive=F, full.names = F))
alpha_list <- alpha_list[alpha_list %in% dt.results[sharpe_ratio > 0.5 & score_delta > 100]$alpha_id]
alpha_list
alpha_list <- setdiff(list.files(dir_path),list.dirs(dir_path,recursive=F, full.names = F))
alpha_list <- alpha_list[alpha_list %in% dt.results[sharpe_ratio > 0.5 & score_delta > 200]$alpha_id]
dt.write.this <- data.table()
alpha_list
dt.write.this <- data.table()
for (i in 1:(length(alpha_list) - 1)){
for (j in (i+1):(length(alpha_list))){
my_code_i <- trimws(readChar(paste0(dir_path, "/", alpha_list[i]), file.info(paste0(dir_path, "/", alpha_list[i]))$size))
my_code_j <- trimws(readChar(paste0(dir_path, "/", alpha_list[j]), file.info(paste0(dir_path, "/", alpha_list[j]))$size))
dt.append.this <- data.table(code = paste0(my_code_i, "*", my_code_j))
dt.write.this <- rbind(dt.write.this, dt.append.this)
}
}
dt.write.this[,id := 1:nrow(dt.write.this)]
dt.write.this[,file_name := paste0("alpha_", id)]
dt.write.this
for (i in 1:nrow(dt.write.this)){
dt.temp <- dt.write.this[id == i]
writeChar(dt.temp$code, paste0(parent_dir, "/test_combinations/", dt.temp$file, ".txt"), nchars = nchar(dt.temp$code))
}
library(data.table)
library(ggplot2)
library(plotly)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
parent_dir <- getwd()
dir_path <- paste0(parent_dir, "/results_combinations/")
result_list <- setdiff(list.files(dir_path),list.dirs(dir_path,recursive=F, full.names = F))
dt.results <- rbindlist(lapply(result_list, function(x) {
print(x)
fread(paste0(dir_path, "/", x))}))
dt.results[,V1 := NULL]
dt.results[,score_delta := as.numeric(score_delta)]
dt.results[,sharpe_ratio := as.numeric(sharpe_ratio)]
dt.results <- dt.results[status != "ERROR"]
dt.results[,strategy := paste(head(unlist(strsplit(alpha_id, "\\_")), -1), collapse = "_"), by = 1:nrow(dt.results)]
dt.results[sharpe_ratio < 1.25, status := "FAIL"]
my_plot <- ggplot(dt.results, aes(x = sharpe_ratio, score_delta, text = paste0("alpha_id: ", alpha_id,
"\nturn_over: ", turn_over,
"\nfitness: ", fitness,
"\nreturns: ", returns),
color = status)) + geom_point(size = 1.5) +
geom_hline(yintercept = 0, size=1) + geom_vline(xintercept = 0, size=1) + geom_vline(xintercept = 1.25, size = 1, color = "red")
ggplotly(my_plot)
# Get the best sharpe ratio for each strategy
dt.results[dt.results[, .I[sharpe_ratio == max(sharpe_ratio)], by=strategy]$V1]
dt.results_good <- dt.results[sharpe_ratio > 1.25 & status == "PASS" & score_delta > 200]
dt.results_good[order(score_delta, decreasing = TRUE)]
# # Move file back to parent folder
# for (i in 1:nrow(dt.results_good)){
#   dt.temp <- dt.results_good[i]
#   chr.path <- paste0(parent_dir, "/test_combinations/fundamental_ratio_sum_combinations/", dt.temp$alpha_id)
#   file.copy(chr.path, paste0(parent_dir, "/test_combinations/", dt.temp$alpha_id))
# }
library(data.table)
library(ggplot2)
library(plotly)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
parent_dir <- getwd()
dir_path <- paste0(parent_dir, "/results_combinations/")
result_list <- setdiff(list.files(dir_path),list.dirs(dir_path,recursive=F, full.names = F))
dt.results <- rbindlist(lapply(result_list, function(x) {
print(x)
fread(paste0(dir_path, "/", x))}))
dt.results[,V1 := NULL]
dt.results[,score_delta := as.numeric(score_delta)]
dt.results[,sharpe_ratio := as.numeric(sharpe_ratio)]
dt.results <- dt.results[status != "ERROR"]
dt.results[,strategy := paste(head(unlist(strsplit(alpha_id, "\\_")), -1), collapse = "_"), by = 1:nrow(dt.results)]
dt.results[sharpe_ratio < 1.25, status := "FAIL"]
my_plot <- ggplot(dt.results, aes(x = sharpe_ratio, score_delta, text = paste0("alpha_id: ", alpha_id,
"\nturn_over: ", turn_over,
"\nfitness: ", fitness,
"\nreturns: ", returns),
color = status)) + geom_point(size = 1.5) +
geom_hline(yintercept = 0, size=1) + geom_vline(xintercept = 0, size=1) + geom_vline(xintercept = 1.25, size = 1, color = "red")
ggplotly(my_plot)
# Get the best sharpe ratio for each strategy
dt.results[dt.results[, .I[sharpe_ratio == max(sharpe_ratio)], by=strategy]$V1]
dt.results_good <- dt.results[sharpe_ratio > 1.25 & status == "PASS" & score_delta > 200]
dt.results_good[order(score_delta, decreasing = TRUE)]
# # Move file back to parent folder
# for (i in 1:nrow(dt.results_good)){
#   dt.temp <- dt.results_good[i]
#   chr.path <- paste0(parent_dir, "/test_combinations/fundamental_ratio_sum_combinations/", dt.temp$alpha_id)
#   file.copy(chr.path, paste0(parent_dir, "/test_combinations/", dt.temp$alpha_id))
# }
library(data.table)
library(ggplot2)
library(plotly)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
parent_dir <- getwd()
dir_path <- paste0(parent_dir, "/results_combinations/")
result_list <- setdiff(list.files(dir_path),list.dirs(dir_path,recursive=F, full.names = F))
dt.results <- rbindlist(lapply(result_list, function(x) {
print(x)
fread(paste0(dir_path, "/", x))}))
dt.results[,V1 := NULL]
dt.results[,score_delta := as.numeric(score_delta)]
dt.results[,sharpe_ratio := as.numeric(sharpe_ratio)]
dt.results <- dt.results[status != "ERROR"]
dt.results[,strategy := paste(head(unlist(strsplit(alpha_id, "\\_")), -1), collapse = "_"), by = 1:nrow(dt.results)]
dt.results[sharpe_ratio < 1.25, status := "FAIL"]
my_plot <- ggplot(dt.results, aes(x = sharpe_ratio, score_delta, text = paste0("alpha_id: ", alpha_id,
"\nturn_over: ", turn_over,
"\nfitness: ", fitness,
"\nreturns: ", returns),
color = status)) + geom_point(size = 1.5) +
geom_hline(yintercept = 0, size=1) + geom_vline(xintercept = 0, size=1) + geom_vline(xintercept = 1.25, size = 1, color = "red")
ggplotly(my_plot)
# Get the best sharpe ratio for each strategy
dt.results[dt.results[, .I[sharpe_ratio == max(sharpe_ratio)], by=strategy]$V1]
dt.results_good <- dt.results[sharpe_ratio > 1.25 & status == "PASS" & score_delta > 200]
dt.results_good[order(score_delta, decreasing = TRUE)]
# # Move file back to parent folder
# for (i in 1:nrow(dt.results_good)){
#   dt.temp <- dt.results_good[i]
#   chr.path <- paste0(parent_dir, "/test_combinations/fundamental_ratio_sum_combinations/", dt.temp$alpha_id)
#   file.copy(chr.path, paste0(parent_dir, "/test_combinations/", dt.temp$alpha_id))
# }
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
parent_dir <- getwd()
dir_path_alt <- paste0(parent_dir, "/results_combinations/fundamental_ratio_mult")
result_list <- list.files(dir_path_alt)
dt.results <- rbindlist(lapply(result_list, function(x) fread(paste0(dir_path_alt, "/", x))))
dt.results[,V1 := NULL]
dt.results[,score_delta := as.numeric(score_delta)]
dt.results[,sharpe_ratio := as.numeric(sharpe_ratio)]
dt.results <- dt.results[status != "ERROR"]
dt.results
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
parent_dir <- getwd()
dir_path <- paste0(parent_dir, "/test_combinations/fundamental_ratio_mult")
alpha_list <- setdiff(list.files(dir_path),list.dirs(dir_path,recursive=F, full.names = F))
alpha_list
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
parent_dir <- getwd()
dir_path <- paste0(parent_dir, "/test_combinations/fundamental_ratio_mult")
alpha_list <- setdiff(list.files(dir_path),list.dirs(dir_path,recursive=F, full.names = F))
alpha_list <- alpha_list[alpha_list %in% dt.results[sharpe_ratio > 0.5 & score_delta > 200]$alpha_id]
alpha_list
dir_path <- paste0(parent_dir, "/test_combinations/fundamental_ratio_mult")
alpha_list <- setdiff(list.files(dir_path),list.dirs(dir_path,recursive=F, full.names = F))
alpha_list <- alpha_list[alpha_list %in% dt.results[sharpe_ratio > 0 & score_delta > 200]$alpha_id]
alpha_list
dir_path <- paste0(parent_dir, "/test_combinations/fundamental_ratio_mult")
alpha_list <- setdiff(list.files(dir_path),list.dirs(dir_path,recursive=F, full.names = F))
alpha_list <- alpha_list[alpha_list %in% dt.results[sharpe_ratio > 0 & score_delta > 0]$alpha_id]
alpha_list
dt.write.this <- data.table()
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
parent_dir <- getwd()
dir_path_alt <- paste0(parent_dir, "/results_combinations/fundamental_estimate_actual_ratio_mult")
dt.results <- rbindlist(lapply(result_list, function(x) fread(paste0(dir_path_alt, "/", x))))
dt.results[,V1 := NULL]
dt.results[,score_delta := as.numeric(score_delta)]
result_list <- list.files(dir_path_alt)
dt.results[,sharpe_ratio := as.numeric(sharpe_ratio)]
dt.results <- dt.results[status != "ERROR"]
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
parent_dir <- getwd()
dir_path <- paste0(parent_dir, "/test_combinations/fundamental_estimate_actual_ratio_mult")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
parent_dir <- getwd()
dir_path_alt <- paste0(parent_dir, "/results_combinations/fundamental_estimate_actual_ratio_mult")
result_list <- list.files(dir_path_alt)
dt.results <- rbindlist(lapply(result_list, function(x) fread(paste0(dir_path_alt, "/", x))))
dt.results[,V1 := NULL]
dt.results[,score_delta := as.numeric(score_delta)]
dt.results[,sharpe_ratio := as.numeric(sharpe_ratio)]
dt.results <- dt.results[status != "ERROR"]
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
parent_dir <- getwd()
dir_path <- paste0(parent_dir, "/test_combinations/fundamental_estimate_actual_ratio_mult")
alpha_list <- setdiff(list.files(dir_path),list.dirs(dir_path,recursive=F, full.names = F))
alpha_list <- alpha_list[alpha_list %in% dt.results[sharpe_ratio > 0.5 & score_delta > 200]$alpha_id]
dt.write.this <- data.table()
for (i in 1:(length(alpha_list) - 1)){
for (j in (i+1):(length(alpha_list))){
my_code_i <- trimws(readChar(paste0(dir_path, "/", alpha_list[i]), file.info(paste0(dir_path, "/", alpha_list[i]))$size))
my_code_j <- trimws(readChar(paste0(dir_path, "/", alpha_list[j]), file.info(paste0(dir_path, "/", alpha_list[j]))$size))
dt.append.this <- data.table(code = paste0(my_code_i, "+", my_code_j))
dt.write.this <- rbind(dt.write.this, dt.append.this)
}
}
dt.write.this[,id := 1:nrow(dt.write.this)]
dt.write.this[,file_name := paste0("alpha_", id)]
for (i in 1:nrow(dt.write.this)){
dt.temp <- dt.write.this[id == i]
writeChar(dt.temp$code, paste0(parent_dir, "/test_combinations/", dt.temp$file, ".txt"), nchars = nchar(dt.temp$code))
}
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
parent_dir <- getwd()
dir_path_alt <- paste0(parent_dir, "/results_combinations/fundamental_ratio_mult")
result_list <- list.files(dir_path_alt)
dt.results <- rbindlist(lapply(result_list, function(x) fread(paste0(dir_path_alt, "/", x))))
dt.results[,V1 := NULL]
dt.results[,score_delta := as.numeric(score_delta)]
dt.results[,sharpe_ratio := as.numeric(sharpe_ratio)]
dt.results <- dt.results[status != "ERROR"]
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
parent_dir <- getwd()
dir_path <- paste0(parent_dir, "/test_combinations/fundamental_ratio_mult")
alpha_list <- setdiff(list.files(dir_path),list.dirs(dir_path,recursive=F, full.names = F))
alpha_list <- alpha_list[alpha_list %in% dt.results[sharpe_ratio > 0 & score_delta > 0]$alpha_id]
dt.write.this <- data.table()
for (i in 1:(length(alpha_list) - 1)){
for (j in (i+1):(length(alpha_list))){
my_code_i <- trimws(readChar(paste0(dir_path, "/", alpha_list[i]), file.info(paste0(dir_path, "/", alpha_list[i]))$size))
my_code_j <- trimws(readChar(paste0(dir_path, "/", alpha_list[j]), file.info(paste0(dir_path, "/", alpha_list[j]))$size))
dt.append.this <- data.table(code = paste0(my_code_i, "+", my_code_j))
dt.write.this <- rbind(dt.write.this, dt.append.this)
}
}
dt.write.this[,id := 1:nrow(dt.write.this)]
dt.write.this[,file_name := paste0("alpha_", id)]
for (i in 1:nrow(dt.write.this)){
dt.temp <- dt.write.this[id == i]
writeChar(dt.temp$code, paste0(parent_dir, "/test_combinations/kyle_testing_3/", dt.temp$file, ".txt"), nchars = nchar(dt.temp$code))
}
dt.write.this
alpha_list
library(data.table)
library(ggplot2)
library(plotly)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
parent_dir <- getwd()
dir_path <- paste0(parent_dir, "/results_combinations/")
result_list <- setdiff(list.files(dir_path),list.dirs(dir_path,recursive=F, full.names = F))
dt.results <- rbindlist(lapply(result_list, function(x) {
print(x)
fread(paste0(dir_path, "/", x))}))
dt.results[,V1 := NULL]
dt.results[,score_delta := as.numeric(score_delta)]
dt.results[,sharpe_ratio := as.numeric(sharpe_ratio)]
dt.results <- dt.results[status != "ERROR"]
dt.results[,strategy := paste(head(unlist(strsplit(alpha_id, "\\_")), -1), collapse = "_"), by = 1:nrow(dt.results)]
dt.results[sharpe_ratio < 1.25, status := "FAIL"]
my_plot <- ggplot(dt.results, aes(x = sharpe_ratio, score_delta, text = paste0("alpha_id: ", alpha_id,
"\nturn_over: ", turn_over,
"\nfitness: ", fitness,
"\nreturns: ", returns),
color = status)) + geom_point(size = 1.5) +
geom_hline(yintercept = 0, size=1) + geom_vline(xintercept = 0, size=1) + geom_vline(xintercept = 1.25, size = 1, color = "red")
ggplotly(my_plot)
# Get the best sharpe ratio for each strategy
dt.results[dt.results[, .I[sharpe_ratio == max(sharpe_ratio)], by=strategy]$V1]
dt.results_good <- dt.results[sharpe_ratio > 1.25 & status == "PASS" & score_delta > 200]
dt.results_good[order(score_delta, decreasing = TRUE)]
# # Move file back to parent folder
# for (i in 1:nrow(dt.results_good)){
#   dt.temp <- dt.results_good[i]
#   chr.path <- paste0(parent_dir, "/test_combinations/fundamental_ratio_sum_combinations/", dt.temp$alpha_id)
#   file.copy(chr.path, paste0(parent_dir, "/test_combinations/", dt.temp$alpha_id))
# }
library(data.table)
library(ggplot2)
library(plotly)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
parent_dir <- getwd()
dir_path <- paste0(parent_dir, "/results_combinations/")
result_list <- setdiff(list.files(dir_path),list.dirs(dir_path,recursive=F, full.names = F))
dt.results <- rbindlist(lapply(result_list, function(x) {
print(x)
fread(paste0(dir_path, "/", x))}))
dt.results[,V1 := NULL]
dt.results[,score_delta := as.numeric(score_delta)]
dt.results[,sharpe_ratio := as.numeric(sharpe_ratio)]
dt.results <- dt.results[status != "ERROR"]
dt.results[,strategy := paste(head(unlist(strsplit(alpha_id, "\\_")), -1), collapse = "_"), by = 1:nrow(dt.results)]
dt.results[sharpe_ratio < 1.25, status := "FAIL"]
my_plot <- ggplot(dt.results, aes(x = sharpe_ratio, score_delta, text = paste0("alpha_id: ", alpha_id,
"\nturn_over: ", turn_over,
"\nfitness: ", fitness,
"\nreturns: ", returns),
color = status)) + geom_point(size = 1.5) +
geom_hline(yintercept = 0, size=1) + geom_vline(xintercept = 0, size=1) + geom_vline(xintercept = 1.25, size = 1, color = "red")
ggplotly(my_plot)
# Get the best sharpe ratio for each strategy
dt.results[dt.results[, .I[sharpe_ratio == max(sharpe_ratio)], by=strategy]$V1]
dt.results_good <- dt.results[sharpe_ratio > 1.25 & status == "PASS" & score_delta > 200]
dt.results_good[order(score_delta, decreasing = TRUE)]
# # Move file back to parent folder
# for (i in 1:nrow(dt.results_good)){
#   dt.temp <- dt.results_good[i]
#   chr.path <- paste0(parent_dir, "/test_combinations/fundamental_ratio_sum_combinations/", dt.temp$alpha_id)
#   file.copy(chr.path, paste0(parent_dir, "/test_combinations/", dt.temp$alpha_id))
# }
dt.cigarettes <- fread("cigarettes.txt")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
dt.cigarettes <- fread("cigarettes.txt")
dt.cigarettes
colnames(dt.cigarettes) <- c("educ", "cigpric", "white", "age", "income", "cigs", "restaurn")
colnames(dt.cigarettes) <- c("educ", "cigpric", "white", "age", "income", "cigs", "restaurn", "response")
dt.cigarettes
head(dt.cigarettes, 10)
??gan
??gam
library(mgcv)
my_gam_model <- gam(response ~ educ + cigpric + white + age + income + cigs + restaurn, data = dt.cigarettes)
library(data.table)
library(mgcv)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
dt.cigarettes <- fread("cigarettes.txt")
colnames(dt.cigarettes) <- c("educ", "cigpric", "white", "age", "income", "cigs", "restaurn", "response")
df.cigarettes <- data.frame(dt.cigarettes)
my_gam_model <- gam(response ~ educ + cigpric + white + age + income + cigs + restaurn, data = df.cigarettes)
my_gam_model
df.cigarettes
library(data.table)
library(mgcv)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
dt.cigarettes <- fread("cigarettes.txt")
colnames(dt.cigarettes) <- c("id", "educ", "cigpric", "white", "age", "income", "cigs", "restaurn")
df.cigarettes <- data.frame(dt.cigarettes)
library(data.table)
library(mgcv)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
dt.cigarettes <- fread("cigarettes.txt")
dt.cigarettes
colnames(dt.cigarettes) <- c("id", "educ", "cigpric", "white", "age", "income", "cigs", "restaurn")
df.cigarettes <- data.frame(dt.cigarettes)
df.cigarettes
my_gam_model <- gam(cigs ~ educ + cigpric + white + age + income + restaurn, data = df.cigarettes)
my_gam_model
model(my_gam_model)
summary(my_gam_model)
gam.check(my_gam_model)
library(data.table)
library(ggplot2)
library(plotly)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
parent_dir <- getwd()
dir_path <- paste0(parent_dir, "/results_combinations/")
result_list <- setdiff(list.files(dir_path),list.dirs(dir_path,recursive=F, full.names = F))
dt.results <- rbindlist(lapply(result_list, function(x) {
print(x)
fread(paste0(dir_path, "/", x))}))
dt.results[,V1 := NULL]
dt.results[,score_delta := as.numeric(score_delta)]
dt.results[,sharpe_ratio := as.numeric(sharpe_ratio)]
dt.results <- dt.results[status != "ERROR"]
dt.results[,strategy := paste(head(unlist(strsplit(alpha_id, "\\_")), -1), collapse = "_"), by = 1:nrow(dt.results)]
dt.results[sharpe_ratio < 1.25, status := "FAIL"]
my_plot <- ggplot(dt.results, aes(x = sharpe_ratio, score_delta, text = paste0("alpha_id: ", alpha_id,
"\nturn_over: ", turn_over,
"\nfitness: ", fitness,
"\nreturns: ", returns),
color = status)) + geom_point(size = 1.5) +
geom_hline(yintercept = 0, size=1) + geom_vline(xintercept = 0, size=1) + geom_vline(xintercept = 1.25, size = 1, color = "red")
ggplotly(my_plot)
# Get the best sharpe ratio for each strategy
dt.results[dt.results[, .I[sharpe_ratio == max(sharpe_ratio)], by=strategy]$V1]
dt.results_good <- dt.results[sharpe_ratio > 1.25 & status == "PASS" & score_delta > 200]
dt.results_good[order(score_delta, decreasing = TRUE)]
# # Move file back to parent folder
# for (i in 1:nrow(dt.results_good)){
#   dt.temp <- dt.results_good[i]
#   chr.path <- paste0(parent_dir, "/test_combinations/fundamental_ratio_sum_combinations/", dt.temp$alpha_id)
#   file.copy(chr.path, paste0(parent_dir, "/test_combinations/", dt.temp$alpha_id))
# }
hist(df.cigarettes$cigs)
my_gam_model_log <- gam(log(cigs) ~ educ + cigpric + white + age + income + restaurn)
my_gam_model_log <- gam(log(cigs) ~ educ + cigpric + white + age + income + restaurn, data = df.cigarettes)
summary(my_gam_model_log)
gam.check(my_gam_model_log)
??step
# Question 2
fit <- step(gam(cigs ~ educ + cigpric + white + age + income + restaurn, data = df.cigarettes))
# Question 2
fit <- step.gam(cigs ~ educ + cigpric + white + age + income + restaurn, data = df.cigarettes)
??step.gam
summary(my_gam_model)
gam.check(my_gam_model)
# Question 3
# As people get older, they tend to smoke more. This could be due to the fact that they have disposable income
# as they get older to spend it on cigarettes. The scatter plot below shows the correlation between age and income
plot(df.cigarettes$age, df.cigarettes$income)
# Question 4
# We shouldn't include income in a linear fashion because of the decreasing marginal benefit of money.
# In other words, as you make more and more money, your consumption of cigarettes will not grow linearly
# since a human can only physically smoke a certain number of cigarettes.
my_gam_model_log <- gam(cigs ~ educ + cigpric + white + age + log(income) + restaurn, data = df.cigarettes)
summary(my_gam_model_log)
gam.check(my_gam_model_log)
library(data.table)
library(ggplot2)
library(plotly)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
parent_dir <- getwd()
dir_path <- paste0(parent_dir, "/results_combinations/")
result_list <- setdiff(list.files(dir_path),list.dirs(dir_path,recursive=F, full.names = F))
dt.results <- rbindlist(lapply(result_list, function(x) {
print(x)
fread(paste0(dir_path, "/", x))}))
dt.results[,V1 := NULL]
dt.results[,score_delta := as.numeric(score_delta)]
dt.results[,sharpe_ratio := as.numeric(sharpe_ratio)]
dt.results <- dt.results[status != "ERROR"]
dt.results[,strategy := paste(head(unlist(strsplit(alpha_id, "\\_")), -1), collapse = "_"), by = 1:nrow(dt.results)]
dt.results[sharpe_ratio < 1.25, status := "FAIL"]
my_plot <- ggplot(dt.results, aes(x = sharpe_ratio, score_delta, text = paste0("alpha_id: ", alpha_id,
"\nturn_over: ", turn_over,
"\nfitness: ", fitness,
"\nreturns: ", returns),
color = status)) + geom_point(size = 1.5) +
geom_hline(yintercept = 0, size=1) + geom_vline(xintercept = 0, size=1) + geom_vline(xintercept = 1.25, size = 1, color = "red")
ggplotly(my_plot)
# Get the best sharpe ratio for each strategy
dt.results[dt.results[, .I[sharpe_ratio == max(sharpe_ratio)], by=strategy]$V1]
dt.results_good <- dt.results[sharpe_ratio > 1.25 & status == "PASS" & score_delta > 200]
dt.results_good[order(score_delta, decreasing = TRUE)]
# # Move file back to parent folder
# for (i in 1:nrow(dt.results_good)){
#   dt.temp <- dt.results_good[i]
#   chr.path <- paste0(parent_dir, "/test_combinations/fundamental_ratio_sum_combinations/", dt.temp$alpha_id)
#   file.copy(chr.path, paste0(parent_dir, "/test_combinations/", dt.temp$alpha_id))
# }
# Question 2
# Which variables to keep in parametric part?
my_gam_model <- gam(cigs ~ educ + cigpric + white + age + income + restaurn, data = df.cigarettes)
summary(my_gam_model)
# We would keep all the variables that are statistically significant. In other words, variables
# that have a p-value of less than 0.05.
my_gam_model_new <- gam(cigs ~ educ + age + income, data = df.cigarettes)
summary(my_gam_model_new)
gam.check(my_gam_model_new)
summary(my_gam_model)
my_gam_model_log <- gam(cigs ~ educ + cigpric + white + age + log(income) + restaurn, data = df.cigarettes)
summary(my_gam_model_log)
gam.check(my_gam_model_log)
# Question 4
# We shouldn't include income in a linear fashion because of the decreasing marginal benefit of money.
# In other words, as you make more and more money, your consumption of cigarettes will not grow linearly
# since a human can only physically smoke a certain number of cigarettes. We then proceed to log income.
my_gam_model_log <- gam(cigs ~ educ + age + log(income), data = df.cigarettes)
summary(my_gam_model_log)
gam.check(my_gam_model_log)
library(data.table)
library(ggplot2)
library(plotly)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
parent_dir <- getwd()
dir_path <- paste0(parent_dir, "/results_combinations/")
result_list <- setdiff(list.files(dir_path),list.dirs(dir_path,recursive=F, full.names = F))
dt.results <- rbindlist(lapply(result_list, function(x) {
print(x)
fread(paste0(dir_path, "/", x))}))
dt.results[,V1 := NULL]
dt.results[,score_delta := as.numeric(score_delta)]
dt.results[,sharpe_ratio := as.numeric(sharpe_ratio)]
dt.results <- dt.results[status != "ERROR"]
dt.results[,strategy := paste(head(unlist(strsplit(alpha_id, "\\_")), -1), collapse = "_"), by = 1:nrow(dt.results)]
dt.results[sharpe_ratio < 1.25, status := "FAIL"]
my_plot <- ggplot(dt.results, aes(x = sharpe_ratio, score_delta, text = paste0("alpha_id: ", alpha_id,
"\nturn_over: ", turn_over,
"\nfitness: ", fitness,
"\nreturns: ", returns),
color = status)) + geom_point(size = 1.5) +
geom_hline(yintercept = 0, size=1) + geom_vline(xintercept = 0, size=1) + geom_vline(xintercept = 1.25, size = 1, color = "red")
ggplotly(my_plot)
# Get the best sharpe ratio for each strategy
dt.results[dt.results[, .I[sharpe_ratio == max(sharpe_ratio)], by=strategy]$V1]
dt.results_good <- dt.results[sharpe_ratio > 1.25 & status == "PASS" & score_delta > 200]
dt.results_good[order(score_delta, decreasing = TRUE)]
# # Move file back to parent folder
# for (i in 1:nrow(dt.results_good)){
#   dt.temp <- dt.results_good[i]
#   chr.path <- paste0(parent_dir, "/test_combinations/fundamental_ratio_sum_combinations/", dt.temp$alpha_id)
#   file.copy(chr.path, paste0(parent_dir, "/test_combinations/", dt.temp$alpha_id))
# }
